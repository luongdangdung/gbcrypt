package com.gbsofts.gbcrypt.main.ui;

import com.gbsofts.gbcrypt.config.CustomConfig;
import com.gbsofts.gbcrypt.util.UIUtil;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.streetjava.util.SJUtil;

/**
 *
 * @author Luong Dang Dung
 */
public class ImportKeysForm extends javax.swing.JFrame {

    static Logger logger = LogManager.getLogger(ImportKeysForm.class.getName());

    /**
     * Creates new form ImportKeysForm
     */
    public ImportKeysForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtPublicKeyFile = new javax.swing.JTextField();
        txtPrivateKeyFile = new javax.swing.JTextField();
        cmdBrowsePublicKeyFile = new javax.swing.JButton();
        cmdBrowsePrivateKeyFile = new javax.swing.JButton();
        cmdImportKeys = new javax.swing.JButton();
        cmdSaveKeys = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Import Keys");

        jLabel2.setText("Public Key File");

        jLabel1.setText("Private Key File");

        cmdBrowsePublicKeyFile.setText("Browse");
        cmdBrowsePublicKeyFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBrowsePublicKeyFileActionPerformed(evt);
            }
        });

        cmdBrowsePrivateKeyFile.setText("Browse");
        cmdBrowsePrivateKeyFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBrowsePrivateKeyFileActionPerformed(evt);
            }
        });

        cmdImportKeys.setText("Import Keys");
        cmdImportKeys.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdImportKeysActionPerformed(evt);
            }
        });

        cmdSaveKeys.setText("Save Keys");
        cmdSaveKeys.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveKeysActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(txtPublicKeyFile, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtPrivateKeyFile)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmdBrowsePublicKeyFile)
                            .addComponent(cmdBrowsePrivateKeyFile)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cmdImportKeys)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmdSaveKeys)))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtPublicKeyFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmdBrowsePublicKeyFile))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtPrivateKeyFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmdBrowsePrivateKeyFile))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmdImportKeys)
                    .addComponent(cmdSaveKeys))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmdImportKeysActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdImportKeysActionPerformed
        try {
            updateKeys();

            UIUtil.POPUP(this, "Import keys successfully!");
        } catch (Exception e) {
            logger.error(SJUtil.GET_STACKTRACE(e));
        }
    }//GEN-LAST:event_cmdImportKeysActionPerformed

    private void updateKeys() {
        CustomConfig.PUBLIC_KEY_PATH = txtPublicKeyFile.getText();
        CustomConfig.PRIVATE_KEY_PATH = txtPrivateKeyFile.getText();
    }

    private void cmdBrowsePublicKeyFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBrowsePublicKeyFileActionPerformed
        // TODO add your handling code here:
        txtPublicKeyFile.setText(UIUtil.GET_FILE_PATH(this));
    }//GEN-LAST:event_cmdBrowsePublicKeyFileActionPerformed

    private void cmdBrowsePrivateKeyFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBrowsePrivateKeyFileActionPerformed
        // TODO add your handling code here:
        txtPrivateKeyFile.setText(UIUtil.GET_FILE_PATH(this));
    }//GEN-LAST:event_cmdBrowsePrivateKeyFileActionPerformed

    private void cmdSaveKeysActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveKeysActionPerformed
        try {
            updateKeys();

            CustomConfig.WRITE_CONFIG();
            
            UIUtil.POPUP(this, "All keys has been saved successfully!");
        } catch (Exception e) {
            logger.error(SJUtil.GET_STACKTRACE(e));
        }

    }//GEN-LAST:event_cmdSaveKeysActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ImportKeysForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ImportKeysForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ImportKeysForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ImportKeysForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ImportKeysForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cmdBrowsePrivateKeyFile;
    private javax.swing.JButton cmdBrowsePublicKeyFile;
    private javax.swing.JButton cmdImportKeys;
    private javax.swing.JButton cmdSaveKeys;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField txtPrivateKeyFile;
    private javax.swing.JTextField txtPublicKeyFile;
    // End of variables declaration//GEN-END:variables
}
